ALTER PROCEDURE [dbo].[ActualizarEmpleado]
    @inNombre VARCHAR(100),
    @inValorDocumentoIdentidad INT,
    @inNuevoNombre VARCHAR(100),
    @inNuevoValorDocumentoIdentidad INT,
    @inIdPuesto INT,
    @outResultCode INT OUTPUT,
    @inUserName VARCHAR(100),
    @inIdPostByUser INT,
    @inPostInIP VARCHAR(49)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @idTipoEvento INT = 8;
	DECLARE @nombrePuestoAntes VARCHAR(100);
	DECLARE @nombrePuestoDespues VARCHAR(100);
    DECLARE @saldoVacaciones INT;

    BEGIN TRY
        IF EXISTS (
            SELECT 1
            FROM dbo.Empleado
            WHERE ValorDocumentoIdentidad = @inNuevoValorDocumentoIdentidad
              AND NOT (Nombre = @inNombre 
			  AND ValorDocumentoIdentidad = @inValorDocumentoIdentidad)
        )
        BEGIN
			BEGIN TRANSACTION;

            SET @outResultCode = 50006;

            INSERT INTO dbo.BitacoraEvento (
                IdTipoEvento, Descripcion, IdPostByUser, PostInIP, PostTime
            )
            VALUES (
                7,
                'Empleado con ValorDocumentoIdentidad ya existe en actualización: '
                    + Cast(@inValorDocumentoIdentidad AS VARCHAR) + ',' + @inNombre + ' -> '
                    + Cast(@inNuevoValorDocumentoIdentidad AS VARCHAR) + ',' + @inNuevoNombre,
                @inIdPostByUser,
                @inPostInIP,
                GETDATE()
            );

            INSERT INTO dbo.DBError (
                UserName
				, Number_
				, State_
				, Severity_
				, Line_
				, Procedure_
				, Message_
				, DateTime_
            )
            VALUES (
                @inUserName,
                50006, 0, 0, ERROR_LINE(), 'dbo.ActualizarEmpleado',
                'Empleado con ValorDocumentoIdentidad ya existe en actualización.',
                GETDATE()
            );

			COMMIT TRANSACTION;
            RETURN;
        END
        IF EXISTS (
            SELECT 1
            FROM dbo.Empleado
            WHERE Nombre = @inNuevoNombre
              AND NOT (Nombre = @inNombre 
			  AND ValorDocumentoIdentidad = @inValorDocumentoIdentidad)
        )
        BEGIN
			BEGIN TRANSACTION;

            SET @outResultCode = 50007;

            INSERT INTO dbo.BitacoraEvento (
                IdTipoEvento
				, Descripcion
				, IdPostByUser
				, PostInIP
				, PostTime
            )
            VALUES (
                7
				, 'Empleado con mismo nombre ya existe en actualización: '
                    +  Cast(@inValorDocumentoIdentidad AS VARCHAR) + ',' + @inNombre + ' -> '
                    + Cast(@inNuevoValorDocumentoIdentidad AS VARCHAR) + ',' + @inNuevoNombre
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
            );

            INSERT INTO dbo.DBError (
                UserName
				, Number_
				, State_
				, Severity_
				, Line_
				, Procedure_
				, Message_
				, DateTime_
            )
            VALUES (
                @inUserName
				, 50007
				, 0
				, 0
				, ERROR_LINE()
				, 'dbo.ActualizarEmpleado'
				, 'Empleado con mismo nombre ya existe en actualización.'
				, GETDATE()
            );

			COMMIT TRANSACTION;
            RETURN;
        END
		ELSE
		BEGIN
			BEGIN TRANSACTION;

			SELECT 
				@nombrePuestoAntes = p.Nombre,
				@saldoVacaciones = e.SaldoVacaciones
			FROM dbo.Empleado e
			INNER JOIN dbo.Puesto p ON p.Id = e.IdPuesto
			WHERE e.Nombre = @inNombre
			  AND e.ValorDocumentoIdentidad = @inValorDocumentoIdentidad;

			SELECT @nombrePuestoDespues = Nombre
			FROM dbo.Puesto
			WHERE Id = @inIdPuesto;

			UPDATE dbo.Empleado
			SET Nombre = @inNuevoNombre,
				ValorDocumentoIdentidad = @inNuevoValorDocumentoIdentidad,
				IdPuesto = @inIdPuesto
			WHERE Nombre = @inNombre
			  AND ValorDocumentoIdentidad = @inValorDocumentoIdentidad;

			SET @outResultCode = 0;

			INSERT INTO dbo.BitacoraEvento (
				IdTipoEvento
				, Descripcion
				, IdPostByUser
				, PostInIP
				, PostTime
			)
			VALUES (
				@idTipoEvento
				, 'Empleado actualizado: Antes -> [' +
					'DocID: ' + CAST(@inValorDocumentoIdentidad AS varchar) + ', ' +
					'Nombre: ' + @inNombre + ', ' +
					'Puesto: ' + @nombrePuestoAntes + '] | Después -> [' +
					'DocID: ' + CAST(@inNuevoValorDocumentoIdentidad AS varchar) + ', ' +
					'Nombre: ' + @inNuevoNombre + ', ' +
					'Puesto: ' + @nombrePuestoDespues + '] | SaldoVacaciones: ' +
					CAST(@saldoVacaciones AS varchar)
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
			);
			
			COMMIT TRANSACTION;
		END;
    END TRY
    BEGIN CATCH
		
		IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END;

        INSERT INTO dbo.DBError (
            UserName
			, Number_
			, State_
			, Severity_
			, Line_
			, Procedure_
			, Message_
			, DateTime_
        )
        VALUES (
            @inUserName
			, ERROR_NUMBER()
			, ERROR_STATE()
			, ERROR_SEVERITY()
			, ERROR_LINE()
			, ERROR_PROCEDURE()
			, ERROR_MESSAGE()
			, GETDATE()
        );

        SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[EliminarEmpleadoCancelar]
    @inNombre NVARCHAR(100),
    @inValorDocumentoIdentidad INT,
    @outResultCode INT OUTPUT,
    @inUserName VARCHAR(100),
    @inIdPostByUser INT,
    @inPostInIP VARCHAR(49)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @idTipoEvento INT = 9;
    DECLARE @nombrePuesto NVARCHAR(100);
    DECLARE @saldoVacaciones INT;

    BEGIN TRY
		SELECT 
			@nombrePuesto = p.Nombre,
			@saldoVacaciones = e.SaldoVacaciones
         FROM dbo.Empleado e
            INNER JOIN dbo.Puesto p ON e.IdPuesto = p.Id
         WHERE e.Nombre = @inNombre 
            AND e.ValorDocumentoIdentidad = @inValorDocumentoIdentidad;

            SET @outResultCode = 0;

            INSERT INTO dbo.BitacoraEvento (
                IdTipoEvento
                , Descripcion
                , IdPostByUser
                , PostInIP
                , PostTime
            )
            VALUES (
                @idTipoEvento
				, CAST(@inValorDocumentoIdentidad AS VARCHAR)+ ', ' 
                + @inNombre + ', ' 
                + @nombrePuesto + ', ' 
                + CAST(@saldoVacaciones AS VARCHAR)
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
            );
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            @inUserName
			, ERROR_NUMBER()
			, ERROR_STATE()
			, ERROR_SEVERITY()
			, ERROR_LINE()
			, ERROR_PROCEDURE()
			, ERROR_MESSAGE()
			, GETDATE()
        );

        SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[EliminarEmpleadoLogicamente]
    @inNombre NVARCHAR(100),
    @inValorDocumentoIdentidad INT,
    @outResultCode INT OUTPUT,
    @inUserName VARCHAR(100),
    @inIdPostByUser INT,
    @inPostInIP VARCHAR(49)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @idTipoEvento INT = 10;
    DECLARE @nombrePuesto NVARCHAR(100);
    DECLARE @saldoVacaciones INT;

    BEGIN TRY
        IF EXISTS (
            SELECT 1 
            FROM dbo.Empleado 
            WHERE Nombre = @inNombre 
              AND ValorDocumentoIdentidad = @inValorDocumentoIdentidad
        )
        BEGIN
			BEGIN TRANSACTION;
            SELECT 
                @nombrePuesto = p.Nombre,
                @saldoVacaciones = e.SaldoVacaciones
            FROM dbo.Empleado e
            INNER JOIN dbo.Puesto p ON e.IdPuesto = p.Id
            WHERE e.Nombre = @inNombre 
              AND e.ValorDocumentoIdentidad = @inValorDocumentoIdentidad;

            UPDATE dbo.Empleado
            SET EsActivo = 0
            WHERE Nombre = @inNombre 
              AND ValorDocumentoIdentidad = @inValorDocumentoIdentidad;

            SET @outResultCode = 0;

            INSERT INTO dbo.BitacoraEvento (
                IdTipoEvento,
                Descripcion,
                IdPostByUser,
                PostInIP,
                PostTime
            )
            VALUES (
                @idTipoEvento,
                Cast(@inValorDocumentoIdentidad as varchar) + ', ' 
                + @inNombre + ', ' 
                + @nombrePuesto + ', ' 
                + CAST(@saldoVacaciones AS VARCHAR),
                @inIdPostByUser,
                @inPostInIP,
                GETDATE()
            );
			COMMIT TRANSACTION;
        END
        ELSE
        BEGIN
			BEGIN TRANSACTION;
            SET @outResultCode = 50008;

            INSERT INTO dbo.DBError (
                UserName,
                Number_,
                State_,
                Severity_,
                Line_,
                Procedure_,
                Message_,
                DateTime_
            )
            VALUES (
                @inUserName,
                50008,
                0,
                0,
                ERROR_LINE(),
                'dbo.EliminarEmpleadoLogicamente',
                'Error de base de datos',
                GETDATE()
            );
			COMMIT TRANSACTION;
        END
    END TRY
    BEGIN CATCH
		IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END;

        INSERT INTO dbo.DBError (
            UserName,
            Number_,
            State_,
            Severity_,
            Line_,
            Procedure_,
            Message_,
            DateTime_
        )
        VALUES (
            @inUserName,
            ERROR_NUMBER(),
            ERROR_STATE(),
            ERROR_SEVERITY(),
            ERROR_LINE(),
            ERROR_PROCEDURE(),
            ERROR_MESSAGE(),
            GETDATE()
        );

        SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[FiltrarEmpleados]
    @inFiltro VARCHAR(100),
    @inEsNumero BIT,
    @outResultCode INT OUTPUT,
    @inUserName VARCHAR(100),
    @inIdPostByUser INT,
    @inPostInIP VARCHAR(49)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @idTipoEvento INT;

    BEGIN TRY
        IF @inEsNumero = 1
        BEGIN
            SET @idTipoEvento = 12;
        END
        ELSE
        BEGIN
            SET @idTipoEvento = 11;
        END

        SELECT 
            e.Id AS IdEmpleado,
            e.Nombre AS NombreEmpleado,
            e.ValorDocumentoIdentidad AS DocumentoEmpleado,
            p.Nombre AS NombrePuesto
        FROM dbo.Empleado AS e
        INNER JOIN dbo.Puesto AS p 
            ON p.Id = e.IdPuesto
        WHERE e.EsActivo = 1
            AND (
                e.Nombre LIKE '%' + @inFiltro + '%'
                OR e.ValorDocumentoIdentidad LIKE '%' + @inFiltro + '%'
            )
        ORDER BY e.Nombre ASC;

        SET @outResultCode = 0;

        INSERT INTO dbo.BitacoraEvento (
            IdTipoEvento
            , Descripcion
            , IdPostByUser
            , PostInIP
            , PostTime
        )
        VALUES (
            @idTipoEvento
            , @inFiltro
            , @inIdPostByUser
            , @inPostInIP
            , GETDATE()
        );
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            @inUserName
            , ERROR_NUMBER()
            , ERROR_STATE()
            , ERROR_SEVERITY()
            , ERROR_LINE()
            , ERROR_PROCEDURE()
            , ERROR_MESSAGE()
            , GETDATE()
        );

        SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[InsertarEmpleado]
    @inIdPuesto INT,
    @inValorDocumentoIdentidad NVARCHAR(50),
    @inNombre NVARCHAR(100),
    @inUserName VARCHAR(100),
    @inIdPostByUser INT,
    @inPostInIP VARCHAR(49),
    @outResultCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @idTipoEvento INT;
    DECLARE @nombrePuesto NVARCHAR(100);
    DECLARE @salarioPuesto DECIMAL(10,2);
    DECLARE @descripcionError NVARCHAR(500);

	SET @idTipoEvento = 6;
    BEGIN TRY
        SELECT 
            @nombrePuesto = Nombre,
            @salarioPuesto = SalarioxHora
        FROM Puesto
        WHERE Id = @inIdPuesto;

        IF EXISTS (SELECT 1 FROM Empleado 
		WHERE ValorDocumentoIdentidad = @inValorDocumentoIdentidad)
        BEGIN
			BEGIN TRANSACTION;
            SET @outResultCode = 50004;

            SELECT @descripcionError = Descripcion 
            FROM Error 
            WHERE Codigo = @outResultCode;

            INSERT INTO DBError (
                UserName
				, Number_
				, State_
				, Severity_
				, Line_
				, Procedure_
				, Message_
				, DateTime_
            )
            VALUES (
                @inUserName
				, @outResultCode
				, 0
				, 0
				, ERROR_LINE()
				, 'dbo.InsertarEmpleado'
				, 'Empleado con ValorDocumentoIdentidad ya existe en inserción.'
				, GETDATE()
            );

            INSERT INTO BitacoraEvento (
                IdTipoEvento
				, Descripcion
				, IdPostByUser
				, PostInIP
				, PostTime
            )
            VALUES (
                5
				,CAST(@inValorDocumentoIdentidad AS VARCHAR) + ', ' + @inNombre + ', ' + 
				@nombrePuesto + ', ' + @descripcionError
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
            );
			COMMIT TRANSACTION;
            RETURN;
        END

        IF EXISTS (SELECT 1 FROM Empleado 
		WHERE Nombre = @inNombre)
        BEGIN
			BEGIN TRANSACTION;
            SET @outResultCode = 50005;

            SELECT @descripcionError = Descripcion 
            FROM Error 
            WHERE Codigo = @outResultCode;

            INSERT INTO DBError (
                UserName
				, Number_
				, State_
				, Severity_
				, Line_
				, Procedure_
				, Message_
				, DateTime_
            )
            VALUES (
                @inUserName
				, @outResultCode
				, 0
				, 0
				, ERROR_LINE()
				, 'dbo.InsertarEmpleado'
				,
                'Empleado con mismo nombre ya existe en inserción.'
				, GETDATE()
            );

            INSERT INTO BitacoraEvento (
                IdTipoEvento
				, Descripcion
				, IdPostByUser
				, PostInIP
				, PostTime
            )
            VALUES (
                5
				, CAST(@inValorDocumentoIdentidad AS varchar) + ', ' + @inNombre + ', ' + 
				@nombrePuesto + ', ' + @descripcionError
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
            );
			COMMIT TRANSACTION;
            RETURN;
        END

		ELSE
		BEGIN
			BEGIN TRANSACTION;
			INSERT INTO Empleado (
				IdPuesto
				, ValorDocumentoIdentidad
				, Nombre
				, FechaContratacion
				, SaldoVacaciones
				, EsActivo
			)
			VALUES (
				@inIdPuesto
				, @inValorDocumentoIdentidad
				, @inNombre
				, GETDATE()
				, @salarioPuesto
				, 1
			);

			SET @outResultCode = 0;

			INSERT INTO BitacoraEvento (
				IdTipoEvento
				, Descripcion
				, IdPostByUser
				, PostInIP
				, PostTime
			)
			VALUES (
				@idTipoEvento
				,CAST( @inValorDocumentoIdentidad AS VARCHAR) + ', ' + @inNombre + ', ' + @nombrePuesto + ', ' +CAST( @salarioPuesto AS VARCHAR)
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
			);
			COMMIT TRANSACTION;
		END
    END TRY
    BEGIN CATCH

		IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END;
		
        SET @outResultCode = ERROR_NUMBER();

        INSERT INTO DBError (
            UserName
			, Number_
			, State_
			, Severity_
			, Line_
			, Procedure_
			, Message_
			, DateTime_
        )
        VALUES (
            @inUserName
			, ERROR_NUMBER()
			, ERROR_STATE()
			, ERROR_SEVERITY()
			, ERROR_LINE()
			, ERROR_PROCEDURE()
			, ERROR_MESSAGE()
			, GETDATE()
        );
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[InsertarMovimiento]
    @inValorDocumentoIdentidad INT
    , @inIdTipoMovimiento INT
    , @inMonto DECIMAL(10, 2)
    , @inPostInIP VARCHAR(50)
    , @inUserName VARCHAR(100)
    , @inIdPostByUser INT
    , @outResultCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @idEmpleado INT;
    DECLARE @saldoActual DECIMAL(10, 2);
    DECLARE @nuevoSaldo DECIMAL(10, 2);

    BEGIN TRY
        SELECT 
            @idEmpleado = e.Id
            , @saldoActual = e.SaldoVacaciones
        FROM dbo.Empleado AS e
        WHERE e.ValorDocumentoIdentidad = @inValorDocumentoIdentidad 
            AND e.EsActivo = 1;

        SET @nuevoSaldo = @saldoActual + @inMonto;

        IF @nuevoSaldo < 0
        BEGIN
			BEGIN TRANSACTION;
            SET @outResultCode = 50011;

			INSERT INTO dbo.BitacoraEvento (
                IdTipoEvento
				, Descripcion
				, IdPostByUser
				, PostInIP
				, PostTime
            )
            VALUES (
                13
				, 'Monto del movimiento rechazado pues si se aplica, el saldo sería negativo.'
                    + Cast(@inValorDocumentoIdentidad AS VARCHAR) + ',' + @inUserName + ' -> '
                    + Cast(@saldoActual AS VARCHAR) + ',' + Cast(@inIdTipoMovimiento AS VARCHAR) 
					+ ',' + Cast(@inMonto AS VARCHAR)
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
            );

			INSERT INTO dbo.DBError (
				UserName
				, Number_
				, State_
				, Severity_
				, Line_
				, Procedure_
				, Message_
				, DateTime_
			)
			VALUES (
				@inUserName
				, @outResultCode
				, 0
				, 0
				, ERROR_LINE()
				, 'dbo.InsertarMovimiento'
				, 'Monto del movimiento rechazado pues si se aplica, el saldo sería negativo.'
				, GETDATE()
			);
			COMMIT TRANSACTION;
            RETURN;
        END;
		ELSE
		BEGIN
			BEGIN TRANSACTION;
			INSERT INTO dbo.Movimiento (
				IdEmpleado
				, IdTipoMovimiento
				, Fecha
				, Monto
				, NuevoSaldo
				, IdPostByUser
				, PostInIP
				, PostTime
			)
			VALUES (
				@idEmpleado
				, @inIdTipoMovimiento
				, GETDATE()
				, @inMonto
				, @nuevoSaldo
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
			);

			INSERT INTO dbo.BitacoraEvento (
				IdTipoEvento
				, Descripcion
				, IdPostByUser
				, PostInIP
				, PostTime
			)
			VALUES (
				14
				, Cast(@inValorDocumentoIdentidad AS VARCHAR) + ',' + @inUserName + ' -> '
					+ Cast(@nuevoSaldo AS VARCHAR) + ',' + Cast(@inIdTipoMovimiento AS VARCHAR) 
					+ ',' + Cast(@inMonto AS VARCHAR)
				, @inIdPostByUser
				, @inPostInIP
				, GETDATE()
			);

			UPDATE dbo.Empleado
			SET SaldoVacaciones = @nuevoSaldo
			WHERE Id = @idEmpleado;

			SET @outResultCode = 0;
			COMMIT TRANSACTION;
		END;
	
    END TRY
    BEGIN CATCH

		IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END;

        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            @inUserName
            , ERROR_NUMBER()
            , ERROR_STATE()
            , ERROR_SEVERITY()
            , ERROR_LINE()
            , ERROR_PROCEDURE()
            , ERROR_MESSAGE()
            , GETDATE()
        );

        SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[ListarMovimientosEmpleado]
    @inValorDocumentoIdentidad INT
	, @outResultCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            m.Fecha AS Fecha
            , tm.Nombre AS NombreTipo
            , m.Monto AS Monto
            , m.NuevoSaldo AS NuevoSaldo
            , u.UserName AS NombreUsuario
            , m.IdPostByUser AS IdPostByUser
            , m.PostTime AS PostTime
			, m.PostInIP AS PostInIP
        FROM dbo.Movimiento AS m
        INNER JOIN dbo.Empleado AS e 
            ON m.idEmpleado = e.id
        INNER JOIN dbo.TipoMovimiento AS tm 
            ON m.idTipoMovimiento = tm.id
        INNER JOIN dbo.Usuario AS u 
            ON m.idPostByUser = u.id
        WHERE e.ValorDocumentoIdentidad = @inValorDocumentoIdentidad
        ORDER BY m.Fecha DESC;
		SET @outResultCode = 0;
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            SUSER_SNAME()
            , ERROR_NUMBER()
            , ERROR_STATE()
            , ERROR_SEVERITY()
            , ERROR_LINE()
            , ERROR_PROCEDURE()
            , ERROR_MESSAGE()
            , GETDATE()
        );
		SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[ObtenerDescripcionError]
    @inCodigoError INT
    , @outDescripcion NVARCHAR(250) OUTPUT
	, @outResultCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            @outDescripcion = ce.Descripcion
        FROM dbo.Error AS ce
        WHERE ce.Codigo = @inCodigoError;
		SET @outResultCode = 0;
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            SUSER_SNAME()
            , ERROR_NUMBER()
            , ERROR_STATE()
            , ERROR_SEVERITY()
            , ERROR_LINE()
            , ERROR_PROCEDURE()
            , ERROR_MESSAGE()
            , GETDATE()
        );

        SET @outDescripcion = 'Error al obtener descripción.';
		SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[ObtenerEmpleadoPorNombreYDocumento]
    @inNombre NVARCHAR(100)
    , @inValorDocumentoIdentidad INT
	, @outResultCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            e.Nombre AS Nombre
            , e.ValorDocumentoIdentidad AS ValorDocumentoIdentidad
            , e.SaldoVacaciones AS SaldoVacaciones
            , e.FechaContratacion AS FechaContratacion
            , p.Nombre AS NombrePuesto
        FROM dbo.Empleado AS e
        INNER JOIN dbo.Puesto AS p 
            ON e.idPuesto = p.id
        WHERE e.Nombre = @inNombre 
          AND e.ValorDocumentoIdentidad = @inValorDocumentoIdentidad;
		SET @outResultCode = 0;
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            SUSER_SNAME()
            , ERROR_NUMBER()
            , ERROR_STATE()
            , ERROR_SEVERITY()
            , ERROR_LINE()
            , ERROR_PROCEDURE()
            , ERROR_MESSAGE()
            , GETDATE()
        );
		SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[ObtenerIdPuestoPorNombre]
    @inNombrePuesto NVARCHAR(100)
	, @outResultCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            p.Id AS Id
        FROM dbo.Puesto AS p
        WHERE p.Nombre = @inNombrePuesto;
		SET @outResultCode = 0;
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            SUSER_SNAME()
            , ERROR_NUMBER()
            , ERROR_STATE()
            , ERROR_SEVERITY()
            , ERROR_LINE()
            , ERROR_PROCEDURE()
            , ERROR_MESSAGE()
            , GETDATE()
        );
		SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[ObtenerListaPuestos]
	@outResultCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            p.Id AS Id
            , p.Nombre AS Nombre
            , p.SalarioxHora AS SalarioxHora
        FROM dbo.Puesto AS p
        ORDER BY p.Nombre;
		SET @outResultCode = 0;
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            SUSER_SNAME()
            , ERROR_NUMBER()
            , ERROR_STATE()
            , ERROR_SEVERITY()
            , ERROR_LINE()
            , ERROR_PROCEDURE()
            , ERROR_MESSAGE()
            , GETDATE()
        );
		SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================
ALTER PROCEDURE [dbo].[ObtenerTiposMovimiento]
    @outResultCode INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            tm.Id AS Id
            , tm.Nombre AS Nombre
        FROM dbo.TipoMovimiento AS tm
        ORDER BY tm.Id ASC;

        SET @outResultCode = 0;
    END TRY
    BEGIN CATCH
        INSERT INTO dbo.DBError (
            UserName
            , Number_
            , State_
            , Severity_
            , Line_
            , Procedure_
            , Message_
            , DateTime_
        )
        VALUES (
            SYSTEM_USER
            , ERROR_NUMBER()
            , ERROR_STATE()
            , ERROR_SEVERITY()
            , ERROR_LINE()
            , ERROR_PROCEDURE()
            , ERROR_MESSAGE()
            , GETDATE()
        );

        SET @outResultCode = ERROR_NUMBER();
    END CATCH;

    SET NOCOUNT OFF;
END;
================================================================================================================================

