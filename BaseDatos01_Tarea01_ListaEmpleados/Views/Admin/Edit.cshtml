@model BaseDatos01_Tarea01_ListaEmpleados.Models.EmployeeEditViewModel

@{
    ViewBag.Title = "Editar Empleado";
}

<h2>Editar Empleado</h2>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        <strong>ERROR:</strong> @TempData["ErrorMessage"]
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.EstadoOriginalJson)

    <div class="form-horizontal">
        <h4>Datos del Empleado</h4>
        <hr />

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <!-- Campo Nombre -->
        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", placeholder = "Nombre completo" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- DropDown para Tipo de Documento -->
        <div class="form-group">
            @Html.LabelFor(model => model.IdTipoDocumento, "Tipo de Documento", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.IdTipoDocumento, Model.TiposDocumento, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdTipoDocumento, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Campo Valor Documento -->
        <div class="form-group">
            @Html.LabelFor(model => model.ValorDocumento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ValorDocumento, new { htmlAttributes = new { @class = "form-control", placeholder = "Ej: 1-2345-6789" } })
                @Html.ValidationMessageFor(model => model.ValorDocumento, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Campo Fecha de Nacimiento -->
        <div class="form-group">
            @Html.LabelFor(model => model.FechaNacimiento, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaNacimiento, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- DropDown para Puesto -->
        <div class="form-group">
            @Html.LabelFor(model => model.IdPuesto, "Puesto", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.IdPuesto, Model.Puestos, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdPuesto, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- DropDown para Departamento -->
        <div class="form-group">
            @Html.LabelFor(model => model.IdDepartamento, "Departamento", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.IdDepartamento, Model.Departamentos, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IdDepartamento, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Botones -->
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-secondary ml-2" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            // Validación del formulario
            $("form").submit(function (e) {
                let isValid = true;

                // Validar dropdowns
                $('select').each(function () {
                    const $this = $(this);
                    if (!$this.val()) {
                        isValid = false;
                        $this.siblings('.text-danger').text('Este campo es requerido.');
                    }
                });

                // Validar fecha de nacimiento
                const fechaNacimiento = new Date($('#FechaNacimiento').val());
                const hoy = new Date();
                const edadMinima = new Date();
                edadMinima.setFullYear(hoy.getFullYear() - 18);

                if (fechaNacimiento > edadMinima) {
                    isValid = false;
                    $('#FechaNacimiento').siblings('.text-danger').text('El empleado debe ser mayor de 18 años.');
                }

                if (!isValid) {
                    e.preventDefault();

                    // Desplazarse al primer error
                    $('html, body').animate({
                        scrollTop: $('.text-danger:visible:first').offset().top - 100
                    }, 500);
                }
            });

            // Limpiar mensajes de error al cambiar
            $('input, select').on('change keyup', function () {
                $(this).siblings('.text-danger').text('');
            });
        });
    </script>
}